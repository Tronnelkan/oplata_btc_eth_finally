from random import randint

from aiogram.utils.markdown import hcode
from blockcypher import satoshis_to_btc, from_base_unit
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command

from data import config
from data.items import items
from keyboards.inline.purchases import buy_keyboard, paid_keyboard_btc
from loader import dp
from utils.misc.bitcoin_payments import Payment, NotConfirmed, NoPaymentFound
from utils.misc.qr_code import qr_link_btc


@dp.message_handler(Command('Buy_btc'))
async def show_items(message: types.Message):
    caption = """
    Названия продукта: {title}
    <i>Описания:</i>
    {description}

    <u>Цена:</u> {price:.8f} <b>BTC</b>
    """
    for item in items:
        await message.answer_photo(
            photo=item.photo_link,
            caption=caption.format(
                title=item.title,
                description=item.description,
                price_BTC=item.price_BTC,
                # price_ETH=item.price_ETH
            ),
            reply_markup=buy_keyboard(item_id=item.id)
        )


@dp.callback_query_handler(text_contains='buy_btc')
async def create_invoice(call: types.CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    item_id = call.data.split(':')[-1]
    item_id = int(item_id) - 1
    item = items[item_id]

    amount_btc = item.price_BTC + randint(5, 500)
    payment_btc = Payment(amount=amount_btc)
    payment_btc.create()

    show_amount = satoshis_to_btc(from_base_unit(payment_btc.amount, 'btc'))
    await call.message.answer(f'Оплатите {show_amount:.8f} по адресу:\n\n' +
                              hcode(config.WALLET_BTC),
                              reply_markup=paid_keyboard_btc)
    qr_code = config.REQUEST_LINK_BTC.format(adress=config.WALLET_BTC,
                                             amount=show_amount,
                                             message='test')  # Назначения платежа, видно только самому пользователю
    await call.message.answer_photo(photo=qr_link_btc(qr_code))
    await state.set_state('btc')
    await state.update_data(payment=payment_btc)


@dp.callback_query_handler(text='cancel', state='btc')
async def cancel_payment(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer('Отмена')
    await state.finish()


@dp.callback_query_handler(text='paid', state='btc')
async def approve_payment(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    payment = data.get('payment')
    try:
        payment.check_payment()
    except NotConfirmed:
        await call.message.answer('Транзакция найдена, но еще не потверждена. Попробуйте позже')
        return
    except NoPaymentFound:
        await call.message.answer('Транзакция не найдена')
        return
    else:
        await call.message.answer('Успешно оплачено')
    await call.message.delete_reply_markup()
    await state.finish()
